FROM node:16-alpine AS frontend-builder

WORKDIR /app

# 复制前端文件
COPY ../OnlineJudgeFE/package*.json ./
COPY ../OnlineJudgeFE/ ./

# 安装依赖并构建
RUN npm install
RUN npm run build

FROM alpine:3.19 AS downloader

WORKDIR /app

# 从本地前端构建结果创建dist.zip
RUN <<EOS
set -ex
apk add zip
cp -r /app/dist dist/
zip -r dist.zip dist
EOS

FROM python:3.12-alpine
ARG TARGETARCH
ARG TARGETVARIANT

ENV OJ_ENV production
WORKDIR /app

COPY ./deploy/requirements.txt /app/deploy/
# psycopg2: libpg-dev
# pillow: libjpeg-turbo-dev zlib-dev freetype-dev
RUN --mount=type=cache,target=/etc/apk/cache,id=apk-cache-$TARGETARCH$TARGETVARIANT-final \
    --mount=type=cache,target=/root/.cache/pip,id=pip-cache-$TARGETARCH$TARGETVARIANT-final \
    <<EOS
set -ex
apk add gcc libc-dev python3-dev libpq libpq-dev libjpeg-turbo libjpeg-turbo-dev zlib zlib-dev freetype freetype-dev supervisor openssl nginx curl unzip
pip install -r /app/deploy/requirements.txt
apk del gcc libc-dev python3-dev libpq-dev libjpeg-turbo-dev zlib-dev freetype-dev
EOS

COPY ./ /app/
COPY --from=downloader --link /app/dist.zip /app/dist.zip
RUN <<EOS
set -ex
cd /app
unzip dist.zip
rm -f dist.zip
EOS

RUN chmod -R u=rwX,go=rX ./ && chmod +x ./deploy/entrypoint.sh

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 CMD [ "/usr/local/bin/python3", "/app/deploy/health_check.py" ]
EXPOSE 8000
ENTRYPOINT [ "/app/deploy/entrypoint.sh" ]